{"version":3,"file":"static/webpack/static/development/pages/timer.js.eb9d10bb5612d6842994.hot-update.js","sources":["webpack:///./molecules/timer/clock.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Flex, Box } from '../../atoms/layout';\nimport { Heading } from '../../atoms/typography';\n\nconst size = 500;\nconst indicatorSize = 10;\n\nconst clockNumbers = [12, 1, 2, 3, 4 , 5, 6, 7, 8, 9, 11];\n\nconst secInDeg = 360 / 60;\nconst minInDeg = 360 / 60;\nconst houInDeg = 360 / 12;\n\nconst getHandSize = (shorten: number) => (size / 2 - shorten);\nconst getIndicatorOffset = () => ((size - indicatorSize) / 2);\nconst getNumberOffset = (inset: number) => (size / 4 - inset);\n\nconst getDegSec = () => (secInDeg * (new Date()).getSeconds());\nconst getDegMin = () => (minInDeg * (new Date()).getMinutes());\nconst getDegHou = () => (houInDeg * ((new Date()).getHours() > 11 ? (new Date()).getHours() - 11 : (new Date()).getHours()));\n\nexport const Clock: React.FC = () => {\n\tconst [degSec, setDegSec] = useState(getDegSec());\n\tconst [degMin, setDegMin] = useState(getDegMin());\n\tconst [degHou, setDegHou] = useState(getDegHou());\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tsetDegSec(getDegSec());\n\t\t\tsetDegMin(getDegMin());\n\t\t\tsetDegHou(getDegHou());\n\t\t}, 1000);\n\t\treturn () => clearInterval(interval);\n\t}, [degSec, degMin, degHou]);\n\n\treturn (\n\t\t<Flex\n\t\t\tm=\"100px auto 0 auto\"\n\t\t\theight={size}\n\t\t\twidth={size}\n\t\t\tbg=\"reds.100\"\n\t\t\tborderRadius=\"100%\"\n\t\t\tborderStyle=\"solid\"\n\t\t\tborderWidth={2}\n\t\t\tjustifyContent=\"center\"\n\t\t\talignItems=\"center\"\n\t\t>\n\t\t\t<Box height=\"15px\" width=\"15px\" bg=\"grays.300\" borderRadius=\"100%\" zIndex={10} />\n\n\t\t\t{[...Array(60).keys()].map(key => <Indicator key={key} deg={minInDeg * (key + 1)} />)}\n\n\t\t\t{[...Array(clockNumbers.length).keys()].map(key => (\n\t\t\t\t<ClockNumber\n\t\t\t\t\tkey={key}\n\t\t\t\t\tnumber={clockNumbers[key]}\n\t\t\t\t\tdeg={360 / clockNumbers.length * key}\n\t\t\t\t/>\n\t\t\t))}\n\n\t\t\t<ClockHand color=\"reds.300\" handSize={getHandSize(30)} deg={degSec} />\n\t\t\t<ClockHand color=\"grays.300\" handSize={getHandSize(30)} deg={degMin} />\n\t\t\t<ClockHand color=\"grays.300\" handSize={getHandSize(100)} deg={degHou} />\n\t\t</Flex>\n\t);\n};\n\nconst Indicator: React.FC<IndicatorProps> = ({ deg }) => (\n\t<Box\n\t\tposition=\"absolute\"\n\t\tbg=\"grays.300\"\n\t\theight={indicatorSize}\n\t\twidth=\"3px\"\n\t\tstyle={{ transform: `rotate(${deg}deg) translateY(-${getIndicatorOffset()}px)` }}\n\t/>\n);\n\ninterface IndicatorProps {\n\tdeg: number;\n}\n\nconst ClockNumber: React.FC<ClockNumberProps> = ({ number, deg }) => (\n\t<Box\n\t\tposition=\"absolute\"\n\t\theight={size / 2}\n\t\tstyle={{ transform: `rotate(${deg}deg) translateY(-${getNumberOffset(20)}px)` }}\n\t>\n\t\t<Heading style={{ transform: `rotate(-${deg}deg)` }}>{number}</Heading>\n\t</Box>\n);\n\ninterface ClockNumberProps {\n\tnumber: number;\n\tdeg: number\n}\n\nconst ClockHand: React.FC<ClockHandProps> = ({ color, handSize, deg }) => (\n\t<Box\n\t\theight={handSize}\n\t\twidth=\"5px\"\n\t\tbg={color}\n\t\tposition=\"absolute\"\n\t\tstyle={{ transform: `rotate(${deg}deg) translateY(-${handSize / 2}px)` }}\n\t/>\n);\n\ninterface ClockHandProps {\n\tcolor: string;\n\thandSize: number;\n\tdeg: number;\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAaA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;;;A","sourceRoot":""}