{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst getWindowDimensions = () => {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n};\n\nexport const useWindowDimensions = () => {\n  const {\n    0: windowDimensions,\n    1: setWindowDimensions\n  } = useState();\n  console.log(windowDimensions);\n\n  if (false) {\n    useEffect(() => {\n      const handleResize = () => setWindowDimensions(getWindowDimensions());\n\n      window.addEventListener('resize', () => handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }, []);\n  }\n\n  return windowDimensions;\n};","map":{"version":3,"sources":["/home/lars/Code/manager/src/atoms/hooks/window-dimensions.ts"],"names":["useState","useEffect","getWindowDimensions","innerWidth","width","innerHeight","height","window","useWindowDimensions","windowDimensions","setWindowDimensions","console","log","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AACjC,QAAM;AAAEC,IAAAA,UAAU,EAAEC,KAAd;AAAqBC,IAAAA,WAAW,EAAEC;AAAlC,MAA6CC,MAAnD;AACA,SAAO;AAAEH,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAP;AACA,CAHD;;AAKA,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACxC,QAAM;AAAA,OAACC,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CV,QAAQ,EAAxD;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYH,gBAAZ;;AAEA,aAAmC;AAClCR,IAAAA,SAAS,CAAC,MAAM;AACf,YAAMY,YAAY,GAAG,MAAMH,mBAAmB,CAACR,mBAAmB,EAApB,CAA9C;;AACAK,MAAAA,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkC,MAAMD,YAAxC;AACA,aAAO,MAAMN,MAAM,CAACQ,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACA,KAJQ,EAIN,EAJM,CAAT;AAKA;;AAED,SAAOJ,gBAAP;AACA,CAbM","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst getWindowDimensions = () => {\n\tconst { innerWidth: width, innerHeight: height } = window;\n\treturn { width, height };\n}\n\nexport const useWindowDimensions = () => {\n\tconst [windowDimensions, setWindowDimensions] = useState<{ width: number; height: number }>();\n\tconsole.log(windowDimensions)\n\n\tif (typeof window !== 'undefined') {\n\t\tuseEffect(() => {\n\t\t\tconst handleResize = () => setWindowDimensions(getWindowDimensions());\n\t\t\twindow.addEventListener('resize', () => handleResize);\n\t\t\treturn () => window.removeEventListener('resize', handleResize);\n\t\t}, []);\n\t}\n\n\treturn windowDimensions;\n};"]},"metadata":{},"sourceType":"module"}