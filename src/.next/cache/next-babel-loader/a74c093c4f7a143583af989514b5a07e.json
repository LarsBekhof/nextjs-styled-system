{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nvar getWindowDimensions = function getWindowDimensions() {\n  var _window = window,\n      width = _window.innerWidth,\n      height = _window.innerHeight;\n  return {\n    width: width,\n    height: height\n  };\n};\n\nexport var useWindowDimensions = function useWindowDimensions() {\n  var _useState = useState(),\n      windowDimensions = _useState[0],\n      setWindowDimensions = _useState[1];\n\n  console.log(windowDimensions);\n\n  if (true) {\n    useEffect(function () {\n      var handleResize = function handleResize() {\n        return setWindowDimensions(getWindowDimensions());\n      };\n\n      window.addEventListener('resize', function () {\n        return handleResize;\n      });\n      return function () {\n        return window.removeEventListener('resize', handleResize);\n      };\n    }, []);\n  }\n\n  return windowDimensions;\n};","map":{"version":3,"sources":["/home/lars/Code/manager/src/atoms/hooks/window-dimensions.ts"],"names":["useState","useEffect","getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","windowDimensions","setWindowDimensions","console","log","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAAA,gBACkBC,MADlB;AAAA,MACbC,KADa,WACzBC,UADyB;AAAA,MACOC,MADP,WACNC,WADM;AAEjC,SAAO;AAAEH,IAAAA,KAAK,EAALA,KAAF;AAASE,IAAAA,MAAM,EAANA;AAAT,GAAP;AACA,CAHD;;AAKA,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAAA,kBACQR,QAAQ,EADhB;AAAA,MACjCS,gBADiC;AAAA,MACfC,mBADe;;AAExCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,gBAAZ;;AAEA,YAAmC;AAClCR,IAAAA,SAAS,CAAC,YAAM;AACf,UAAMY,YAAY,GAAG,SAAfA,YAAe;AAAA,eAAMH,mBAAmB,CAACR,mBAAmB,EAApB,CAAzB;AAAA,OAArB;;AACAC,MAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkC;AAAA,eAAMD,YAAN;AAAA,OAAlC;AACA,aAAO;AAAA,eAAMV,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAN;AAAA,OAAP;AACA,KAJQ,EAIN,EAJM,CAAT;AAKA;;AAED,SAAOJ,gBAAP;AACA,CAbM","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst getWindowDimensions = () => {\n\tconst { innerWidth: width, innerHeight: height } = window;\n\treturn { width, height };\n}\n\nexport const useWindowDimensions = () => {\n\tconst [windowDimensions, setWindowDimensions] = useState<{ width: number; height: number }>();\n\tconsole.log(windowDimensions)\n\n\tif (typeof window !== 'undefined') {\n\t\tuseEffect(() => {\n\t\t\tconst handleResize = () => setWindowDimensions(getWindowDimensions());\n\t\t\twindow.addEventListener('resize', () => handleResize);\n\t\t\treturn () => window.removeEventListener('resize', handleResize);\n\t\t}, []);\n\t}\n\n\treturn windowDimensions;\n};"]},"metadata":{},"sourceType":"module"}