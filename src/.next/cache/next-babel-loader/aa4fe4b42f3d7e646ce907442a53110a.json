{"ast":null,"code":"var _jsxFileName = \"/home/lars/Code/manager/src/molecules/timer/clock.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Flex, Box } from '../../atoms/layout';\nimport { Heading } from '../../atoms/typography';\nconst size = 500;\nconst indicatorSize = 10;\nconst clockNumbers = [12, 3, 6, 9];\nconst secInDeg = 360 / 60;\nconst minInDeg = 360 / 60;\nconst houInDeg = 360 / 12;\n\nconst getHandSize = shorten => size / 2 - shorten;\n\nconst getIndicatorOffset = () => (size - indicatorSize) / 2;\n\nconst getNumberOffset = inset => size / 2 - inset;\n\nconst getDegSec = () => secInDeg * new Date().getSeconds();\n\nconst getDegMin = () => minInDeg * new Date().getMinutes();\n\nconst getDegHou = () => houInDeg * (new Date().getHours() > 11 ? new Date().getHours() - 11 : new Date().getHours());\n\nexport const Clock = () => {\n  const {\n    0: degSec,\n    1: setDegSec\n  } = useState(getDegSec());\n  const {\n    0: degMin,\n    1: setDegMin\n  } = useState(getDegMin());\n  const {\n    0: degHou,\n    1: setDegHou\n  } = useState(getDegHou());\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDegSec(getDegSec());\n      setDegMin(getDegMin());\n      setDegHou(getDegHou());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [degSec, degMin, degHou]);\n  return __jsx(Flex, {\n    m: \"100px auto 0 auto\",\n    height: size,\n    width: size,\n    bg: \"reds.100\",\n    borderRadius: \"100%\",\n    borderStyle: \"solid\",\n    borderWidth: 2,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(Box, {\n    height: \"15px\",\n    width: \"15px\",\n    bg: \"black\",\n    borderRadius: \"100%\",\n    zIndex: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), [...Array(60).keys()].map(key => __jsx(Indicator, {\n    key: key,\n    deg: minInDeg * (key + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), __jsx(ClockNumber, {\n    number: 12,\n    deg: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), __jsx(ClockHand, {\n    color: \"reds.300\",\n    handSize: getHandSize(30),\n    deg: degSec,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), __jsx(ClockHand, {\n    color: \"black\",\n    handSize: getHandSize(30),\n    deg: degMin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), __jsx(ClockHand, {\n    color: \"black\",\n    handSize: getHandSize(100),\n    deg: degHou,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }));\n};\n\nconst Indicator = ({\n  deg\n}) => __jsx(Box, {\n  position: \"absolute\",\n  bg: \"black\",\n  height: indicatorSize,\n  width: \"3px\",\n  style: {\n    transform: `rotate(${deg}deg) translateY(-${getIndicatorOffset()}px)`\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n});\n\nconst ClockNumber = ({\n  number,\n  deg\n}) => __jsx(Box, {\n  position: \"absolute\",\n  height: size / 2,\n  style: {\n    transform: `rotate(${deg}deg) translateY(-${size / 4}px)`\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77\n  },\n  __self: this\n}, __jsx(Heading, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82\n  },\n  __self: this\n}, number));\n\nconst ClockHand = ({\n  color,\n  handSize,\n  deg\n}) => __jsx(Box, {\n  height: handSize,\n  width: \"5px\",\n  bg: color,\n  position: \"absolute\",\n  style: {\n    transform: `rotate(${deg}deg) translateY(-${handSize / 2}px)`\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 92\n  },\n  __self: this\n});","map":{"version":3,"sources":["/home/lars/Code/manager/src/molecules/timer/clock.tsx"],"names":["React","useEffect","useState","Flex","Box","Heading","size","indicatorSize","clockNumbers","secInDeg","minInDeg","houInDeg","getHandSize","shorten","getIndicatorOffset","getNumberOffset","inset","getDegSec","Date","getSeconds","getDegMin","getMinutes","getDegHou","getHours","Clock","degSec","setDegSec","degMin","setDegMin","degHou","setDegHou","interval","setInterval","clearInterval","Array","keys","map","key","Indicator","deg","transform","ClockNumber","number","ClockHand","color","handSize"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Flex, Box } from '../../atoms/layout';\nimport { Heading } from '../../atoms/typography';\n\nconst size = 500;\nconst indicatorSize = 10;\n\nconst clockNumbers = [12, 3, 6, 9];\n\nconst secInDeg = 360 / 60;\nconst minInDeg = 360 / 60;\nconst houInDeg = 360 / 12;\n\nconst getHandSize = (shorten: number) => (size / 2 - shorten);\nconst getIndicatorOffset = () => ((size - indicatorSize) / 2);\nconst getNumberOffset = (inset: number) => (size / 2 - inset);\n\nconst getDegSec = () => (secInDeg * (new Date()).getSeconds());\nconst getDegMin = () => (minInDeg * (new Date()).getMinutes());\nconst getDegHou = () => (houInDeg * ((new Date()).getHours() > 11 ? (new Date()).getHours() - 11 : (new Date()).getHours()));\n\nexport const Clock: React.FC = () => {\n\tconst [degSec, setDegSec] = useState(getDegSec());\n\tconst [degMin, setDegMin] = useState(getDegMin());\n\tconst [degHou, setDegHou] = useState(getDegHou());\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tsetDegSec(getDegSec());\n\t\t\tsetDegMin(getDegMin());\n\t\t\tsetDegHou(getDegHou());\n\t\t}, 1000);\n\t\treturn () => clearInterval(interval);\n\t}, [degSec, degMin, degHou]);\n\n\treturn (\n\t\t<Flex\n\t\t\tm=\"100px auto 0 auto\"\n\t\t\theight={size}\n\t\t\twidth={size}\n\t\t\tbg=\"reds.100\"\n\t\t\tborderRadius=\"100%\"\n\t\t\tborderStyle=\"solid\"\n\t\t\tborderWidth={2}\n\t\t\tjustifyContent=\"center\"\n\t\t\talignItems=\"center\"\n\t\t>\n\t\t\t<Box height=\"15px\" width=\"15px\" bg=\"black\" borderRadius=\"100%\" zIndex={10} />\n\n\t\t\t{[...Array(60).keys()].map(key => <Indicator key={key} deg={minInDeg * (key + 1)} />)}\n\n\t\t\t<ClockNumber number={12} deg={0} />\n\n\t\t\t<ClockHand color=\"reds.300\" handSize={getHandSize(30)} deg={degSec} />\n\t\t\t<ClockHand color=\"black\" handSize={getHandSize(30)} deg={degMin} />\n\t\t\t<ClockHand color=\"black\" handSize={getHandSize(100)} deg={degHou} />\n\t\t</Flex>\n\t);\n};\n\nconst Indicator: React.FC<IndicatorProps> = ({ deg }) => (\n\t<Box\n\t\tposition=\"absolute\"\n\t\tbg=\"black\"\n\t\theight={indicatorSize}\n\t\twidth=\"3px\"\n\t\tstyle={{ transform: `rotate(${deg}deg) translateY(-${getIndicatorOffset()}px)` }}\n\t/>\n);\n\ninterface IndicatorProps {\n\tdeg: number;\n}\n\nconst ClockNumber: React.FC<ClockNumberProps> = ({ number, deg }) => (\n\t<Box\n\t\tposition=\"absolute\"\n\t\theight={size / 2}\n\t\tstyle={{ transform: `rotate(${deg}deg) translateY(-${size / 4}px)` }}\n\t>\n\t\t<Heading>{number}</Heading>\n\t</Box>\n);\n\ninterface ClockNumberProps {\n\tnumber: number;\n\tdeg: number\n}\n\nconst ClockHand: React.FC<ClockHandProps> = ({ color, handSize, deg }) => (\n\t<Box\n\t\theight={handSize}\n\t\twidth=\"5px\"\n\t\tbg={color}\n\t\tposition=\"absolute\"\n\t\tstyle={{ transform: `rotate(${deg}deg) translateY(-${handSize / 2}px)` }}\n\t/>\n);\n\ninterface ClockHandProps {\n\tcolor: string;\n\thandSize: number;\n\tdeg: number;\n}"]},"metadata":{},"sourceType":"module"}