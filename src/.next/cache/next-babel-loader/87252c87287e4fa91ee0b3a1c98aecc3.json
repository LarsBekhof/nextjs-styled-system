{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst getWindowDimensions = () => {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n};\n\nexport const useWindowDimensions = () => {\n  const {\n    0: windowDimensions,\n    1: setWindowDimensions\n  } = useState();\n  useEffect(() => {\n    if (false) {\n      setWindowDimensions(getWindowDimensions());\n\n      const handleResize = () => setWindowDimensions(getWindowDimensions());\n\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [false ? window : undefined]);\n  return windowDimensions || {\n    width: 0,\n    height: 0\n  };\n};","map":{"version":3,"sources":["/home/lars/Code/manager/src/atoms/hooks/window-dimensions.ts"],"names":["useState","useEffect","getWindowDimensions","innerWidth","width","innerHeight","height","window","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","undefined"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AACjC,QAAM;AAAEC,IAAAA,UAAU,EAAEC,KAAd;AAAqBC,IAAAA,WAAW,EAAEC;AAAlC,MAA6CC,MAAnD;AACA,SAAO;AAAEH,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAP;AACA,CAHD;;AAKA,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACxC,QAAM;AAAA,OAACC,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CV,QAAQ,EAAxD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACf,eAAmC;AAClCS,MAAAA,mBAAmB,CAACR,mBAAmB,EAApB,CAAnB;;AAEA,YAAMS,YAAY,GAAG,MAAMD,mBAAmB,CAACR,mBAAmB,EAApB,CAA9C;;AACAK,MAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,aAAO,MAAMJ,MAAM,CAACM,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACA;AACD,GARQ,EAQN,CAAC,QAAgCJ,MAAhC,GAAyCO,SAA1C,CARM,CAAT;AAUA,SAAOL,gBAAgB,IAAI;AAAEL,IAAAA,KAAK,EAAE,CAAT;AAAYE,IAAAA,MAAM,EAAE;AAApB,GAA3B;AACA,CAdM","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst getWindowDimensions = () => {\n\tconst { innerWidth: width, innerHeight: height } = window;\n\treturn { width, height };\n}\n\nexport const useWindowDimensions = () => {\n\tconst [windowDimensions, setWindowDimensions] = useState<{ width: number; height: number }>();\n\n\tuseEffect(() => {\n\t\tif (typeof window !== 'undefined') {\n\t\t\tsetWindowDimensions(getWindowDimensions());\n\n\t\t\tconst handleResize = () => setWindowDimensions(getWindowDimensions());\n\t\t\twindow.addEventListener('resize', handleResize);\n\t\t\treturn () => window.removeEventListener('resize', handleResize);\n\t\t}\n\t}, [typeof window !== 'undefined' ? window : undefined]);\n\n\treturn windowDimensions || { width: 0, height: 0 };\n};"]},"metadata":{},"sourceType":"module"}